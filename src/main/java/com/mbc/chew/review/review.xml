<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mbc.chew.review.ReviewService">

<insert id="insertReview" parameterType="com.mbc.chew.review.ReviewDTO">
        INSERT INTO REVIEW_3 (ID, STORECODE, CONTENT, STARS, TITLE)
        VALUES (
            #{id, jdbcType=VARCHAR},
            #{storecode, jdbcType=NUMERIC},
            #{content, jdbcType=VARCHAR},
            #{stars, jdbcType=NUMERIC},
            #{title, jdbcType=VARCHAR}
        )
</insert>

<select id="reviewout" parameterType="int" resultType="com.mbc.chew.review.ReviewDTO">
        SELECT * from (select rownum rn, A.* from (SELECT ID, STORECODE, CONTENT, STARS, TITLE
        FROM REVIEW_3 
        where storecode= #{param1}) A)
        where rn&lt;=5

</select>

<select id="getReviews" resultType="com.mbc.chew.review.ReviewDTO">
    select * from (
	    select rownum rn, A.* from (
	        select * from review_3
	        where storecode = #{param1}
	    ) A
	    where rownum &lt;= #{param2} + 6
	)
	where rn > #{param2}
</select>

<select id="getAverageStars" parameterType="int" resultType="double">
	SELECT NVL(ROUND(AVG(STARS), 1), 0) <!-- nvl->리뷰가 없어도 0반환 -->
	FROM REVIEW_3 
	WHERE STORECODE = #{storecode}
</select>
    
<update id="updateReview" parameterType="com.mbc.chew.review.ReviewDTO">
    UPDATE REVIEW_3
    SET TITLE = #{title},   
        CONTENT = #{content}  
    WHERE ID = #{id}     
      AND STORECODE = #{storecode} 
</update>


    
<delete id="deleteReview">
  DELETE FROM REVIEW_3 
  WHERE ID = #{param1} AND STORECODE = #{param2}
</delete>


<!-- 리뷰관리하다가말앗다 -->

     <!-- 모든 매장 목록과 리뷰 정보 가져오기 -->
    <select id="getAllStoresWithReviewInfo" resultType="com.mbc.chew.review.ReviewManageDTO">
        SELECT
            s.storecode,
            s.storename,
            COUNT(r.id) AS review_count,
            AVG(r.stars) AS average_rating
        FROM
            STORE_3 s
        LEFT JOIN
            REVIEW_3 r ON s.storecode = r.storecode
        GROUP BY
            s.storecode, s.storename
    </select>

    <!-- 특정 매장에 대한 리뷰 수 가져오기 -->
    <select id="getReviewCountByStorecode" resultType="int">
        SELECT COUNT(*) 
        FROM REVIEW_3 
        WHERE storecode = #{storecode}
    </select>

    <!-- 특정 매장에 대한 평균 별점 가져오기 -->
    <select id="getAverageRatingByStorecode" resultType="double">
        SELECT AVG(stars)
        FROM REVIEW_3
        WHERE storecode = #{storecode}
    </select>
    
<!-- 리뷰관리안해도되지않을까하하하ㅏ하 -->

</mapper>

